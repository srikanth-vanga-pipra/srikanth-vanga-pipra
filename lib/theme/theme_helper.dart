import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray50,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.gray600,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray800,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray60001,
          fontSize: 16.fSize,
          fontFamily: 'Avenir',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray500,
          fontSize: 14.fSize,
          fontFamily: 'Avenir',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray600,
          fontSize: 12.fSize,
          fontFamily: 'Avenir',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 40.fSize,
          fontFamily: 'Avenir',
          fontWeight: FontWeight.w800,
        ),
        displaySmall: TextStyle(
          color: colorScheme.primaryContainer.withOpacity(1),
          fontSize: 38.fSize,
          fontFamily: 'Avenir',
          fontWeight: FontWeight.w800,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.primaryContainer.withOpacity(1),
          fontSize: 24.fSize,
          fontFamily: 'Avenir',
          fontWeight: FontWeight.w800,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray500,
          fontSize: 12.fSize,
          fontFamily: 'Avenir',
          fontWeight: FontWeight.w800,
        ),
        labelMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 10.fSize,
          fontFamily: 'Avenir',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.gray90001,
          fontSize: 22.fSize,
          fontFamily: 'Avenir',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray50,
          fontSize: 16.fSize,
          fontFamily: 'Avenir',
          fontWeight: FontWeight.w800,
        ),
        titleSmall: TextStyle(
          color: colorScheme.primaryContainer.withOpacity(1),
          fontSize: 14.fSize,
          fontFamily: 'Avenir',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF298F60),
    primaryContainer: Color(0X191E1F20),

    // Error colors
    errorContainer: Color(0XFF49454F),
    onError: Color(0XFF0084FF),
    onErrorContainer: Color(0XCCFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFF100F0F),
    onPrimaryContainer: Color(0XFFB3B6B6),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amberA700 => Color(0XFFFFA800);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue100 => Color(0XFFAED7FE);

  // BlueGray
  Color get blueGray100 => Color(0XFFD1D1D1);
  Color get blueGray300 => Color(0XFF9EA3AE);
  Color get blueGray30001 => Color(0XFF8E98A8);
  Color get blueGray50 => Color(0XFFEAF4EF);
  Color get blueGray800 => Color(0XFF423D5B);
  Color get blueGray900 => Color(0XFF2B2C34);
  Color get blueGray90001 => Color(0XFF2C2C2E);
  Color get blueGray90002 => Color(0XFF222B45);
  Color get blueGray90003 => Color(0XFF113C28);
  Color get blueGray90004 => Color(0XFF282F3E);

  // DeepOrange
  Color get deepOrange300 => Color(0XFFFF7262);
  Color get deepOrange50 => Color(0XFFFFE6E6);

  // Gray
  Color get gray200 => Color(0XFFEFEFEF);
  Color get gray300 => Color(0XFFE0E0E0);
  Color get gray30001 => Color(0XFFE5E5E5);
  Color get gray50 => Color(0XFFF9F9F9);
  Color get gray500 => Color(0XFF8F9392);
  Color get gray50001 => Color(0XFF9E9E9E);
  Color get gray50002 => Color(0XFFBA9595);
  Color get gray600 => Color(0XFF787979);
  Color get gray60001 => Color(0XFF747688);
  Color get gray60002 => Color(0XFF767680);
  Color get gray700 => Color(0XFF666666);
  Color get gray70001 => Color(0XFF616262);
  Color get gray800 => Color(0XFF35383F);
  Color get gray900 => Color(0XFF0B1513);
  Color get gray90001 => Color(0XFF1D1B20);
  Color get gray90002 => Color(0XFF211E1E);
  Color get gray90003 => Color(0XFF22222A);
  Color get gray90019 => Color(0X1913212F);

  // Green
  Color get green100 => Color(0XFFBDDCCE);
  Color get green200 => Color(0XFF9DCBB6);
  Color get green20001 => Color(0XFF8FCBA7);
  Color get green300 => Color(0XFF70B494);
  Color get green400 => Color(0XFF54A580);
  Color get green50 => Color(0XFFE7F4EC);
  Color get green700 => Color(0XFF258257);
  Color get green800 => Color(0XFF0B8E40);
  Color get green80001 => Color(0XFF1D6644);
  Color get green80002 => Color(0XFF0B8F40);
  Color get greenA700 => Color(0XFF00A240);

  // Indigo
  Color get indigo50 => Color(0XFFE9EBF8);
  Color get indigo80026 => Color(0X26173D81);

  // Orange
  Color get orange100 => Color(0XFFF5DD9E);
  Color get orange200 => Color(0XFFFFCD6B);
  Color get orange800 => Color(0XFFE9760C);

  // Red
  Color get red500 => Color(0XFFEA4335);
  Color get red600 => Color(0XFFF32020);
  Color get red60001 => Color(0XFFF12626);
  Color get red60002 => Color(0XFFF31F1F);
  Color get redA200 => Color(0XFFFF4A4A);
  Color get redA70019 => Color(0X19FF0000);

  // Teal
  Color get teal50 => Color(0XFFCEFCE2);
  Color get teal600 => Color(0XFF0D9C58);
  Color get teal900 => Color(0XFF174F35);
  Color get tealA400 => Color(0XFF1ED4B2);

  // Yellow
  Color get yellow900 => Color(0XFFEA770D);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
